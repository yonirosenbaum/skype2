<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Dashboard</title>
    <link href="/dashboard.css" rel="stylesheet"/>
    <link href="/dashboardtwo.css" rel="stylesheet"/>
    <script
    src="https://use.fontawesome.com/releases/v5.14.0/js/all.js"
    data-auto-a11y="true"
    data-search-pseudo-elements
  ></script>
  <script>
    const SEARCH_RESULTS = "<%= searchResults %>"
  </script>
    <script src="/script"></script>
</head>
<body style="min-height: 100%;">
    <div class="dashboard">
        <div class="dashboard__header">
            <a style="color: white; text-decoration: none;" href="/dashboard"><h4>Your Chats</h4></a>
            <a href="/requests" style="text-decoration: none; font-size: 16px; padding-right: 40px; color: white;">Friend Requests</a>
            <div style="position: relative; display: flex; flex-direction: column;">
            <form class="dashboard__searchForm" action="/search" method="POST">
              <input name="searchInput" class="dashboard__searchInput" type="text" placeholder="Search for a user"/>
              <div class="dashboard__searchIcon__wrapper">
                 <a><i class="dashboard__searchIcon fa fa-search"></i></a>
              </div>
           </form>
           <div style="display: none; position: absolute; top: 39px; z-index: 100;" class="dashboard__searchResults">
           </div>
        </div>
           <a class="dashboard__logout">Log Out</a>
        </div>
        <div style="mask-image: linear-gradient(to bottom, rgba(0,0,0,1), rgba(173, 160, 154, 0.1))">
        <div style="padding-top: 10px; background: black" class="dashboard__chats">
        </div>
        </div>
    </div>
    <script>
      let splitResults = SEARCH_RESULTS.split(',')
      //SET ID OF DOCUMENT.BODY TO USER ID SO IT CAN BE ACCESSED MORE EASILY
      const xhr = new XMLHttpRequest();
      const newIconForAdded = document.createElement('i')
      function handleSearchClickIfUserNotAdded(){
console.log('script deferred')
const selectAllSearches = document.querySelectorAll('.addClickEvent')
const selectAllSearchesArray = [...selectAllSearches]
console.log('selectAllSearchesArray', selectAllSearchesArray)
for(let i=0; i<selectAllSearchesArray.length; i++){
selectAllSearchesArray[i].addEventListener('click', e => handleUserAdd(e))
}
function handleUserAdd(e){
console.log('addededede')
if(!e.currentTarget.classList.contains('status4') && !e.currentTarget.classList.contains('status2')){
      console.log('username from click event', e.currentTarget.parentElement.textContent )
    
      //get parent element text without add and set that to username
      // first figure out why styling duplicates icon
          var xhttp = new XMLHttpRequest();
  xhttp.open("POST", "/addfriend", true);
  xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
  xhttp.send(`username=${e.currentTarget.parentElement.children[0].textContent}&id=${document.body.id}`);
  console.log('xhr ready state change')
  //based on what is returned
  console.log('user added client side and response', xhr.response)
  console.log('ect', e.currentTarget)
  e.currentTarget.classList += ' search__result_pending'
  e.currentTarget.textContent = ''
  e.currentTarget.appendChild(newIconForAdded);
  newIconForAdded.classList = 'fas fa-address-book';
    }}
  }

      xhr.open("get", "/getCurrentUser", true);
      xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
     xhr.send();
     xhr.onreadystatechange = function() {
       document.body.setAttribute('id', `${xhr.response}`)
       if(xhr.readyState === 4){
       console.log('getcurrentuser', xhr.response)
       document.body.setAttribute('id', `${xhr.response}`)
       document.body.id = `${xhr.response}`
       console.log('xhr response', xhr.response)
       let bodyId = xhr.response
       //checkUserFriendshipStatus(bodyId)
     
     }
    }
      console.log(SEARCH_RESULTS);
      //returns myuser,myuser,myuser,myuser
      console.log('split search results', splitResults);
      console.log(typeof splitResults);


      const renderSearchResult = (results) => {
        document.querySelector('.dashboard__searchResults').innerHTML = '<div></div>'
          const renderResultsAsHtml = results.map(result=>{
            if(results){
          let newResult = ` 
          <div class="dashboard__searchResult" style="justify-content: space-between; min-width: 100px; display: flex; border: 1px solid lightgrey; color: lightgrey; background: black;">
            <p class="search__result">${result}</p>
            <a id="${result}-text" class="addClickEvent dashboard__search__add ${result}" style="padding-bottom: 5px; align-items: center; background: green; min-width: 30px; display: flex; flex-direction: column-reverse;">add<i id="${result}-icon" class="fas fa-user" style="font-size: 12px; height: 20px; width: 20px; padding-bottom: 2px;"></i></a>
          </div>
        `
        document.querySelector('.dashboard__searchResults').innerHTML += newResult
           }})
          console.log(renderResultsAsHtml)
      }
      //renderSearchResult(splitResults)

/* searchbar onchange send message to dynamically display search information and stop page reloading- use AJAX update search click so that when they click it
  all data is displayed in the app ina search content page
*/
document.querySelector('.dashboard__searchInput').addEventListener('keyup', function(e){
var xhttp = new XMLHttpRequest();
xhttp.open("POST", "/searchUpdate", true);
xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
xhttp.send(`searchInput=${e.currentTarget.value}`);
console.log('request sent')
xhttp.onreadystatechange = function() {
  console.log('xhr ready state change')
    if (xhttp.readyState === 4 && xhttp.response.length) {
      console.log('response', xhttp.response);
      const responseAsArray = xhttp.response.split(',');
      splitResults = responseAsArray;
      console.log('response', typeof responseAsArray);
      if(!xhttp.response.message){
      renderSearchResult(responseAsArray)
      }
      else if(xhttp.response.message){
        console.log(xhttp.response.message)
      }
      if(document.querySelector('.dashboard__searchInput').value.length > 0){
        document.querySelector('.dashboard__searchResults').style.display = 'block'
      }
     if(document.querySelector('.dashboard__searchInput').value.length == 0){
       document.querySelector('.dashboard__searchResults').style.display = 'none'
      }
    }

        //if friend request send. Set the pending style to the user.
        const bodyId = document.body.getAttribute('id');
        console.log('bodyId equals', bodyId)
        const xhrTwo = new XMLHttpRequest();
      xhrTwo.open("post", "/checkuserstatus", true);
      xhrTwo.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      xhrTwo.send(`id=${bodyId}&searchResults=${splitResults}`); 
    xhrTwo.onreadystatechange = function(){
        if(xhrTwo.readyState === 4){
          const responseAsObject = JSON.parse(xhrTwo.response)
          console.log(responseAsObject)
          for(let i =0; i < responseAsObject.length; i++){
            console.log(responseAsObject)
            console.log(typeof responseAsObject)
            console.log(responseAsObject[i].username)
            console.log(responseAsObject[i].id)
            console.log(responseAsObject[i].status)

          if(responseAsObject[i].status == 4){
            console.log('4')
            //change -icon to css font-awesome
            //need it to get current icon
            const iconWrapperList= document.querySelectorAll(`#${responseAsObject[i].username}-text`);
            const iconWrapperArray = [...iconWrapperList];
            //create new friend icon
            console.log(iconWrapperArray)
            for(let i=0; i<iconWrapperArray.length; i++){
              let friendIcon = document.createElement('i')
              //friendIcon.classList += ' fas'
            friendIcon.classList = 'iconPostFriend'
            iconWrapperArray[i].style.background = 'white'
            iconWrapperArray[i].style.color = 'darkgrey'
              iconWrapperArray[i].textContent = ''
              iconWrapperArray[i].classList += `status4`
              iconWrapperArray[i].appendChild(friendIcon)
            }
            //document.querySelector(`#${responseAsObject[i].username}-text`).appendChild(friendIcon)
            console.log('response 4', document.querySelector(`#${responseAsObject[i].username}-text`))
            //document.querySelector(`#${responseAsObject[i].username}`).classList += ' search__result_friend'
            //document.querySelector(`#${responseAsObject[i].username}-icon`).classList = 'iconPostFriend'
          }
          if(responseAsObject[i].status == 2 || responseAsObject[i].status == 3){
            const iconWrapperList= document.querySelectorAll(`#${responseAsObject[i].username}-text`);
            const iconWrapperArray = [...iconWrapperList];
            for(let i=0; i<iconWrapperArray.length; i++){
              let friendIcon = document.createElement('i')
              //friendIcon.classList += ' fas'
              friendIcon.classList = 'iconPostFriend'
              iconWrapperArray[i].textContent = 'requested'
              iconWrapperArray[i].style.background = 'darkSlateBlue';
              iconWrapperArray[i].style.color = 'darkgrey';
              iconWrapperArray[i].classList += `status2`
              iconWrapperArray[i].appendChild(friendIcon)
              /*iconWrapperArray[i].addEventListener('click', e => e {

              })*/          
            }
              /*console.log('2')
              console.log('response matches')
              console.log(document.querySelector(`#${responseAsObject[i].username}-icon`))
              console.log(document.querySelector(`#${responseAsObject[i].username}`))
            document.querySelector(`#${responseAsObject[i].username}-text`).textContent = ''
            document.querySelector(`.${responseAsObject[i].username}`).classList.add('search__result_pending')
            document.querySelector(`#${responseAsObject[i].username}-icon`).classList.add('iconPostFriend')
            console.log(document.querySelector(`#${responseAsObject[i].username}-icon`))
            //document.querySelector(`#${responseAsObject[i].username}-icon`).classList = 'fa'
           // document.querySelector(`#${responseAsObject[i].username}`).style.fontFamily = 'Font Awesome 5 Free'
            console.log(document.querySelector(`#${responseAsObject[i].username}`))
            console.log(document.querySelector(`#${responseAsObject[i].username}-icon`))*/
          }   
        }
        handleSearchClickIfUserNotAdded()   
        }
      } 
}
})

      //document.querySelector('.dashboard__searchResults').innerHTML = renderSearchResult();
      
      //document.querySelector('.dashboard__searchResults').innerHTML = renderSearchResult()

      document.querySelector('.dashboard__searchIcon__wrapper').addEventListener('click', function(){
          console.log('clicked')
          document.querySelector('.dashboard__searchForm').submit()
          //POST REQUEST WITH THE SEARCH RESULTS AND HAVE A REDIRECTED PAGE IN THE ROUTER WHICH
          // GETS THE RESULTS and calls res.render with the results here.

          //const searchBarJSON = ("search" : {"search" : "pop" })
          /*fetch('/search', {
              method: 'POST',
              headers: {
      'Content-Type': 'application/json'
    },
              body: {"search" : "pop"}
          })
          .then(res => {
              console.log('dashboard res', res)
              )
          .then(data=>{console.log(data)})*/
      })

      //SEE FRIEND REQUESTS AND SET NUMBER FOR THESE IN SPAN BELOW - 
      //WHEN CLICKED FRIEND REQUESTS SHOULD ROUTE TO A NEW PAGE.
      // IF THE PERSON CLICKS ACCEPT OR REJECT THIS SHOULD UPDATE
      //BOTH TABLES FOR EACH USER.
      //IF THEY ACCEPT ALL USERS SHOULD BE DISPLAYED IN DASHBOARD.
    /*  const xhr = new XMLHttpRequest();
      xhr.open("get", "/getCurrentUser", true);
      xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
     xhr.send();
     xhr.onreadystatechange = function() {
       document.body.setAttribute('id', `${xhr.response}`)
     }*/
     function renderFriendToDashboard(index, username){
      let newResult = ` 
          <div id="${index}" class="dashboard__searchResult" style="margin-bottom: 10px; box-shadow: 0px 0px 1px 2px darkgrey; border-radius: 5px; margin-left: 20px; margin-right: 20px; padding-left: 30px; justify-content: space-between; min-width: 100px; display: flex; border: 1px solid darkgrey; color: #605f62; letter-spacing: 0.13rem; background: lightgrey;">
            <p style="font-weight: 900; text-shadow: 0px 0px 0px 1px #4d4c4e; font-weight: 22px;" class="${index}">${username}</p>
            <a class="dashboard__contact" style="padding-bottom: 5px; align-items: center; background: white; color: darkgrey; min-width: 30px; display: flex; flex-direction: column-reverse;">Contact<i class="fas fa-camera" style="padding-bottom: 2px;"></i></a>
          </div>
        `
        document.querySelector('.dashboard__chats').innerHTML += newResult
     }
     let searchResultList = [];
     const xhttp2 = new XMLHttpRequest();
      xhttp2.open("get", "/friendsList", true);
      xhttp2.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
     xhttp2.send();
     xhttp2.onreadystatechange = function() {
      if (xhttp2.readyState === 4){
        console.log(xhttp2.response)
        console.log(typeof xhttp2.response)
        const friendsIds = JSON.parse(xhttp2.response)

        const xhttp3 = new XMLHttpRequest()
        xhttp3.open("post", "/getusers", true);
        xhttp3.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xhttp3.send(`id=${friendsIds}`);
        xhttp3.onreadystatechange = function() {
       // const responseAsArray = [...splitResponse]
        //console.log(responseAsArray)
        if (xhttp3.readyState === 4){
          const friendsUsernames = JSON.parse(xhttp3.response)
          console.log(friendsUsernames)
          console.log(friendsIds)
          async function renderElements(){
          for(let i =0; i<friendsIds.length;i++){
            await renderFriendToDashboard(friendsIds[i], friendsUsernames[i])
            //send friend request
          }
          searchResultList = [...document.querySelectorAll('.dashboard__searchResult')]
      //const searchResultListUserName = [...document.querySelectorAll('.search__result')]
        }
        renderElements()
        }
      }
     }
    }
    function handleUserAdd(e, i){
        console.log('handleclick')
        const current = e.currentTarget
        if(current.children[0].style.background == 'white'){
          console.log('handleclick if for white')
          return
        } else{
          console.log('handleclick else')
        console.log('text',document.querySelector('.search__result').textContent)
        console.log('body.id', document.body.id)
        var xhttp = new XMLHttpRequest();
        xhttp.open("POST", "/addfriend", true);
        xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xhttp.send(`username=${searchResultList[i].children[0].textContent}&id=${document.body.id}`);
        xhttp.onreadystatechange = function() {
        console.log('xhr ready state change')
        //based on what is returned
    if (xhttp.readyState === 4 && xhttp.response == 'user_added') {
        current.children[1].classList += ' search__result_pending'
        current.children[1].textContent = ''
        const icon = document.createElement('i')
        current.children[1].appendChild(icon);
        icon.classList += 'fas fa-address-book';
        for (let i=0; i<searchResultList.length; i++){
  searchResultList[i].addEventListener('click', e => handleUserAdd(e, i))
  //console.log('adding event listener', searchResultList[i])
}
    }
  }
}
//current.removeEventListener('click', handleUserAdd)
}
    </script>
</body>
</html>